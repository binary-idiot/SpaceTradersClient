@using Fluxor
@using SpaceTraders.Features.LoginFeature.State
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<LoginState> LoginState
@inject IDispatcher Dispatcher
@inject IActionSubscriber ActionSubscriber

<h3>@(LoginState.Value.IsLoggedIn ? "Logged In" : "Logged Out")</h3>

<EditForm Model="Login" OnValidSubmit="HandleValidSubmit">
    @if (SignUp)
    {
        <label>
            Username
            <input @bind="Login.Username" type="text">
        </label>
        <button type="submit">Register</button>
        <button @onclick="() => SignUp = !SignUp">Switch to log in</button>
    }
    else
    {
        <label>
            Token
            <input name="login-token" @bind="Login.Token" type="text">
        </label>
        <button type="submit">Log in</button>
        <button @onclick="() => SignUp = !SignUp">Switch to register</button>
    }
</EditForm>

@code {
    private bool SignUp { get; set; }
    private Login Login { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateLogin(LoginState.Value.Login);
        
        ActionSubscriber.SubscribeToAction<LoadLoginSuccessAction>(this, action =>
        {
            UpdateLogin(action.Login);
            InvokeAsync(() => StateHasChanged());
        });
        
        Dispatcher.Dispatch(new LoadLoginAction());
    }

    private void HandleValidSubmit()
    {
        Dispatcher.Dispatch((SignUp) ? new RegisterAction(Login) : new LoginAction(Login));
    }

    private void UpdateLogin(Login? login)
    {
        SignUp = string.IsNullOrWhiteSpace(login?.Token);
        Login = login ?? new Login();
    }
}