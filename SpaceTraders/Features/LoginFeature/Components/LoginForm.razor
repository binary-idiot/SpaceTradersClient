@using Fluxor
@using SpaceTraders.Features.LoginFeature.State
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<LoginState> LoginState
@inject IDispatcher Dispatcher
@inject IActionSubscriber ActionSubscriber
<div class="login-form">
    <EditForm Model="Login" OnValidSubmit="HandleValidSubmit">
        <Field>
            <FieldLabel>Username</FieldLabel>
            <TextEdit @bind-Text="Login.Username" />
        </Field>
        
        @if (!SignUp)
        {
            <Field>
                <FieldLabel>Token</FieldLabel>
                <TextEdit @bind-Text="Login.Token" />
            </Field>
        }
        
        <Button Type="ButtonType.Submit" Color="Color.Primary">@getModeString()</Button>
        <Button @onclick="() => SwitchMode()">Switch to @getModeString(true).ToLower()</Button>
    </EditForm>
</div>

@code {
    private bool SignUp { get; set; }
    private Login Login { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        ActionSubscriber.SubscribeToAction<LoadLoginSuccessAction>(this, action =>
        {
            UpdateLogin(action.Login);
            InvokeAsync(() => StateHasChanged());
        });
        
        UpdateLogin(LoginState.Value.Login);
        if (string.IsNullOrWhiteSpace(LoginState.Value.Login?.Token))
        {
            Dispatcher.Dispatch(new LoadLoginAction());
        }
    }

    private void HandleValidSubmit()
    {
        Dispatcher.Dispatch((SignUp) ? new RegisterAction(Login) : new LoginAction(Login));
    }

    private void SwitchMode()
    {
        UpdateLogin((SignUp) ? LoginState.Value.Login : null);
    }
    
    private void UpdateLogin(Login? login = null)
    {
        SignUp = string.IsNullOrWhiteSpace(login?.Token);
        Login = login ?? new Login();
    }

    private string getModeString(bool unselected = false)
    {
        return (unselected ^ SignUp) ? "Register" : "Login";
    }
}